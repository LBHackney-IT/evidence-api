version: 2.1

orbs:
  aws-cli: circleci/aws-cli@0.1.9
  aws_assume_role: lbh-hackit/aws_assume_role@0.1.0

executors:
  docker-python:
    docker:
      - image: circleci/python:3.7
  docker-dotnet:
    docker:
      - image: mcr.microsoft.com/dotnet/sdk:6.0

references:
  workspace_root: &workspace_root "~"
  attach_workspace: &attach_workspace
    attach_workspace:
      at: *workspace_root

commands:
  assume-role-and-persist-workspace:
    description: "Assumes deployment role and persists credentials across jobs"
    parameters:
      aws-account:
        type: string
    steps:
      - checkout
      - aws_assume_role/assume_role:
          account: <<parameters.aws-account>>
          profile_name: default
          role: "LBH_Circle_CI_Deployment_Role"
      - persist_to_workspace:
          root: *workspace_root
          paths:
            - .aws
  deploy-lambda:
    description: "Deploys API via Serverless"
    parameters:
      stage:
        type: string
    steps:
      - *attach_workspace
      - checkout
      - setup_remote_docker
      - run:
          name: Install Node.js
          command: |
            curl -sL https://deb.nodesource.com/setup_14.x | bash -
            apt-get update && apt-get install -y nodejs
      - run:
          name: Install serverless CLI
          command: npm i -g serverless@^3
      - run:
          name: Build lambda
          command: |
            cd ./EvidenceApi/
            chmod +x ./build.sh
            ./build.sh
      - run:
          name: Deploy lambda
          command: |
            cd ./EvidenceApi/
            npm install --save-dev serverless-plugin-lambda-insights
            sls deploy --stage <<parameters.stage>> --conceal
  publish-to-swaggerhub:
    description: "Publishes API docs to SwaggerHub"
    steps:
      - *attach_workspace
      - checkout
      - setup_remote_docker
      - run:
          name: Install Node.js
          command: |
            curl -sL https://deb.nodesource.com/setup_14.x | bash -
            apt-get update && apt-get install -y nodejs
      - run:
          name: Install SwaggerHub CLI
          command: npm i -g swaggerhub-cli
      - run:
          name: Publish to SwaggerHub
          command: |
            cd ./EvidenceApi/
            chmod +x ./publish-to-swagger-hub.sh
            ./publish-to-swagger-hub.sh

  migrate-database:
    description: "Migrate database"
    parameters:
      stage:
        type: string
    steps:
      - *attach_workspace
      - checkout
      - setup_remote_docker
      - run:
          name: Install Unzip
          command: apt-get update && apt-get install unzip
      - run:
          name: Install ssh
          command: apt-get update && apt-get install -y --no-install-recommends ssh-client && rm -rf /var/lib/apt/lists/*
      - run:
          name: Install AWS CLI
          command: |
            curl -L -o awscliv2.zip "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip"
            unzip awscliv2.zip
            ./aws/install
      - run:
          name: Install Session Manager plugin
          command: |
            curl "https://s3.amazonaws.com/session-manager-downloads/plugin/latest/ubuntu_64bit/session-manager-plugin.deb" -o "session-manager-plugin.deb"
            dpkg -i session-manager-plugin.deb
      - run:
          name: Install dotnet ef core
          command: dotnet tool install dotnet-ef --version 7.0.0 --tool-path ./dotnet-ef-local/
      - run:
          name: SSH into RDS and migrate database
          command: |
            aws ssm get-parameter --name "/document-evidence-store-<<parameters.stage>>-jump-box-pem-key" --output text --query Parameter.Value > ./private-key.pem
            chmod 400 ./private-key.pem
            HOST=$(aws ssm get-parameter --name /evidence-api/<<parameters.stage>>/postgres-hostname --query Parameter.Value)
            PORT=$(aws ssm get-parameter --name /evidence-api/<<parameters.stage>>/postgres-port --query Parameter.Value)
            INSTANCE_NAME=$(aws ssm get-parameter --name /document-evidence-store-<<parameters.stage>>-jump-box-instance-name --query Parameter.Value)
            ssh -4 -i ./private-key.pem -Nf -M -L ${PORT//\"}:${HOST//\"}:${PORT//\"} -o "UserKnownHostsFile=/dev/null" -o "StrictHostKeyChecking=no" -o ProxyCommand="aws ssm start-session --target %h --document AWS-StartSSHSession --parameters portNumber=%p --region=eu-west-2" ec2-user@${INSTANCE_NAME//\"}
            PASSWORD=$(aws ssm get-parameter --name /evidence-api/<<parameters.stage>>/postgres-password --query Parameter.Value --with-decryption)
            USERNAME=$(aws ssm get-parameter --name /evidence-api/<<parameters.stage>>/postgres-username --query Parameter.Value)
            DATABASE=$(aws ssm get-parameter --name /evidence-api/<<parameters.stage>>/postgres-database --query Parameter.Value)
            CONN_STR="Host=localhost;Password=${PASSWORD};Port=${PORT};Username=${USERNAME};Database=${DATABASE}"
            cd ./EvidenceApi/
            CONNECTION_STRING=${CONN_STR} ./../dotnet-ef-local/dotnet-ef database update

jobs:
  check-code-formatting:
    executor: docker-dotnet
    steps:
      - checkout
      - run:
          name: Install dotnet format
          command: dotnet tool install dotnet-format --tool-path ./dotnet-format-local/
      - run:
          name: Run formatter check
          command: ./dotnet-format-local/dotnet-format --check

  build-and-test:
    executor: docker-python
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Run tests
          command: docker-compose -f EvidenceApi.Tests/compose.yml run test

  assume-role-staging:
    executor: docker-python
    steps:
      - assume-role-and-persist-workspace:
          aws-account: $AWS_ACCOUNT_STAGING
  assume-role-production:
    executor: docker-python
    steps:
      - assume-role-and-persist-workspace:
          aws-account: $AWS_ACCOUNT_PRODUCTION

  deploy-to-staging:
    executor: docker-dotnet
    steps:
      - deploy-lambda:
          stage: "staging"

  deploy-to-production:
    executor: docker-dotnet
    steps:
      - deploy-lambda:
          stage: "production"

  migrate-database-staging:
    executor: docker-dotnet
    steps:
      - migrate-database:
          stage: "staging"

  migrate-database-production:
    executor: docker-dotnet
    steps:
      - migrate-database:
          stage: "production"

  publish-to-swaggerhub:
    executor: docker-dotnet
    steps:
      - publish-to-swaggerhub

workflows:
  check-and-deploy-staging-and-production:
    jobs:
      # Build & Test
      - check-code-formatting
      - build-and-test

      # Staging deploy
      - assume-role-staging:
          context: api-assume-role-document-evidence-store-staging-context
          requires:
            - build-and-test
          filters:
            branches:
              only:
                - main
      - migrate-database-staging:
          requires:
            - assume-role-staging
      - deploy-to-staging:
          requires:
            - migrate-database-staging

      # Production deploy
      - permit-production-release:
          type: approval
          requires:
            - deploy-to-staging
      - assume-role-production:
          context: api-assume-role-document-evidence-store-production-context
          requires:
            - permit-production-release
      - migrate-database-production:
          requires:
            - assume-role-production
      - deploy-to-production:
          requires:
            - migrate-database-production
      - publish-to-swaggerhub:
          context: api-assume-role-document-evidence-store-production-context
          requires:
            - deploy-to-production
